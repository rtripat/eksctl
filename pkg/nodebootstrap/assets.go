// Code generated by go-bindata.
// sources:
// assets/10-eksclt.al2.conf
// assets/bootstrap.al2.sh
// assets/bootstrap.ubuntu.sh
// assets/kubelet.yaml
// DO NOT EDIT!

package nodebootstrap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __10EkscltAl2Conf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x41\x6b\xdb\x4c\x10\xbd\xeb\x57\x2c\x24\x87\xef\x03\xaf\x94\x38\x6e\x0e\x01\x1d\xd4\x58\x09\x06\xd5\x09\x91\x43\x0b\x6d\x31\xe3\xdd\xb1\x33\x78\x35\x2b\x76\x57\x76\xd2\xe0\xff\x5e\x64\x59\xad\x4b\x42\xe9\x4d\x3b\x6f\xe6\xbd\x79\x33\xa3\x13\x81\x6b\xaf\x82\x91\xbe\x46\x45\x4b\x52\xc2\xbf\xf8\x80\x95\x16\xda\xd9\x5a\x12\x8b\x86\x29\x88\xa5\x75\x62\xdd\x2c\xd0\x60\x18\xec\x1f\x59\x05\x3f\x2c\x8b\x82\xb8\x79\x16\x43\xf1\x5f\x56\x0c\xff\x8f\xa2\xaf\x25\xba\x0d\x29\xfc\x1e\x9d\x88\xc2\x2a\x30\xa2\xc2\x00\x1a\x02\x88\x1a\x1c\x54\x18\xd0\xf9\x2b\xf1\x90\xdf\x4e\xee\xa6\x03\x91\x7d\x2e\xe7\xe3\xfc\x26\x7b\x2c\x66\xf3\x2e\x16\xe5\xbc\x21\x67\xb9\x42\x0e\x37\x64\x30\x4d\x30\xa8\xa4\x6b\x31\xe9\xb9\x62\xe4\x4d\x74\x22\x6e\x8d\x5d\x80\x11\xc0\x5a\xf8\x00\x81\xd4\x1f\x1a\x9f\xb2\x2f\xf3\xfb\xbb\x71\x39\x10\xd7\xc5\x63\x39\xcb\x1f\xe6\xe3\x69\x39\x10\xd3\xbb\x71\x3e\x2f\xb2\x8f\x79\xd1\x3f\x66\xd9\x64\x3a\x2b\xff\x2a\x7c\x70\x7e\xd0\xed\x8c\xb1\x65\xf9\x8e\xec\x9e\x72\x72\x3f\x10\x93\x69\x39\xcb\xa6\xd7\xf9\x7c\x32\xfe\x27\x6e\xd3\xb2\xee\x15\xa2\xfc\x19\x55\x19\xc0\x85\xf4\xe8\x33\x69\xbc\x4b\x16\xc4\x7d\x81\xf8\x16\x09\x21\x25\x5b\x8d\x92\xea\xf4\xf4\xf5\xa0\xbc\x3b\x06\x0c\x2c\xd0\xf8\x1e\xec\x6c\xef\x06\x60\xea\x27\x88\x3b\xfd\x98\x6c\x42\xec\x03\xb0\x42\x49\x3a\x3d\x7d\x3d\x6a\xbc\xe7\x72\xb8\x22\x1f\xd0\xed\x49\xd3\xe0\x1a\x3c\x0e\x6e\x29\x3c\xc9\x00\xc4\xe1\x97\x52\x37\xd3\xbe\x1c\x8c\xb1\x5b\x59\x3b\xda\x90\xc1\x15\xea\x8e\xa1\xc3\x94\xb1\x8d\x96\xb5\xb3\x1b\xd2\xe8\x52\xd8\xfa\x1e\xb0\xdc\x72\xa2\x93\xae\xe1\x40\x15\xa6\xda\xaa\x35\xba\xde\x1e\x86\xad\x75\x6b\x59\x9b\x66\x45\x9c\x2a\xa6\xbe\x8e\x49\x2e\x88\xa5\x26\x97\x26\xb6\x0e\x89\x62\x6a\xe7\x76\x04\x2b\xcb\xcb\x0e\x6f\xf7\xd0\xe2\x8c\x21\xd6\x87\x8c\xda\x6a\x49\xbc\x74\x70\xd4\x02\x55\xb0\xc2\xf4\xf2\x6c\x38\x3a\x3b\x3f\x1f\x5d\x8c\x3e\x0c\x63\xbd\x76\x31\x2a\x17\x9f\xbe\xbe\xbd\xe2\x5d\x0c\xfb\xdf\x03\xb6\x3e\x56\xb6\x6a\x57\x9d\xd4\xd0\x78\x94\x50\xe9\xcb\xd1\xd5\x45\x7c\x7e\x10\x6b\x97\xd9\xb6\x43\xab\x37\x47\xd1\x85\xe3\x17\xa8\xcc\xef\x91\xbc\x97\xd8\x5e\x4f\x9b\x15\xfd\x0c\x00\x00\xff\xff\xda\x88\x90\x0a\xcc\x03\x00\x00")

func _10EkscltAl2ConfBytes() ([]byte, error) {
	return bindataRead(
		__10EkscltAl2Conf,
		"10-eksclt.al2.conf",
	)
}

func _10EkscltAl2Conf() (*asset, error) {
	bytes, err := _10EkscltAl2ConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10-eksclt.al2.conf", size: 972, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapAl2Sh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcd\xc1\x4a\xc4\x40\x0c\xc6\xf1\x7b\x9f\x22\xae\x1e\xf4\x30\x0d\xca\x2a\x28\x28\x88\xbb\x87\x5e\xaa\xa0\xf7\x25\x9d\x7e\xd0\x61\xd3\x99\xa5\x49\x17\x7c\x7b\x51\x8a\xec\x4d\xf0\x14\xf8\x27\xe1\x77\x7e\xc6\x5d\xca\x6c\x03\x05\xcc\x55\x85\x38\x14\x5a\xb5\xaf\x9b\xed\xae\x79\x7b\xbc\xb8\x8c\xf3\xa4\x14\x82\x25\x45\x76\x1a\xdc\x0f\x0f\xcc\xd7\x77\xf7\xf5\xcd\xed\xba\x5e\x26\xab\x38\xcc\x79\x84\x4b\xe8\xc5\x85\xb5\x44\xd1\x90\x0e\xc7\xf5\xd5\x8a\x9e\x88\xe1\x91\xb1\xb7\xe8\xca\xfb\xb9\x83\xc2\xeb\x9f\x93\x1a\xf9\xb8\x90\x4d\xfb\xfe\xf1\xdc\xbe\x6c\x77\xcd\xe6\xdf\x6c\xca\xe6\x92\x23\x42\xea\xbf\xdd\xbf\xe0\xca\x3e\xcd\x31\x46\x57\xea\x05\x63\xc9\x61\x82\x16\xe9\x4f\x3a\xb2\x74\x0a\x5a\x7e\x4f\x16\xe6\x32\xf9\x6f\xff\x0a\x00\x00\xff\xff\x11\xf1\xc5\x0b\x45\x01\x00\x00")

func bootstrapAl2ShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAl2Sh,
		"bootstrap.al2.sh",
	)
}

func bootstrapAl2Sh() (*asset, error) {
	bytes, err := bootstrapAl2ShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.al2.sh", size: 325, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapUbuntuSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x7f\x6b\x1b\x47\x10\xfd\x5f\x9f\x62\xaa\x08\x1a\x43\xf6\x2e\x76\x94\x40\x03\x57\xaa\x46\x6a\x31\x75\xe5\x60\x29\xa4\x50\x8a\x18\xed\xce\xe9\x16\xed\xed\x1c\xbb\x73\x52\x1d\xe3\xef\x5e\x56\xa7\x53\x64\x43\x1b\x28\xfa\x43\xb7\xfb\xde\xfc\xd8\x99\x37\xf3\xe2\xbb\x7c\x6d\x7d\xbe\xc6\x58\x81\xa2\x76\x30\x20\x5d\x31\x0c\xe7\xb7\xd3\xd9\xea\xfa\x63\x31\x7a\xa9\xdb\xe0\x40\xa9\x68\x1d\x79\x81\x4a\xa4\x79\x9f\xe7\x97\xef\x7e\xc8\xae\xde\x8e\xb3\xe3\x7f\xee\x50\x28\x4a\x5e\x93\xa0\x32\x28\x98\x3b\xd6\xe8\x94\x6d\x76\xe3\x8b\x21\xfc\x08\x39\x89\xce\x69\x1b\xb5\xb8\x7c\xdb\xae\xc9\x91\x64\x07\x4a\x46\x7e\x77\x0c\x79\x3d\x5f\x2c\x27\xf3\x0f\xb3\xd5\xf5\xf4\x7f\x87\xb5\x3e\x0a\x7a\x4d\xca\x9a\x14\xf7\x5b\x81\x07\xd1\x63\x03\xe8\x2c\x46\x38\xa2\x8a\xb6\x31\x3b\x7e\xf7\x77\xcf\x69\x5a\xdc\x89\xa6\xc5\xf5\x77\x1d\x2d\x0a\x37\xe7\xce\x06\xf1\x3e\x0a\xd5\x89\x17\x28\x92\xa8\x12\xad\x23\x33\x18\xbc\x1c\x00\xbc\x80\xe5\xed\xf4\xf6\x3d\x48\x45\x91\x20\x56\xdc\x3a\x03\x6b\x02\xc7\xbc\x25\x03\x28\x40\x3b\x0a\xf7\x20\xb6\xa6\xde\x29\x44\xc1\x20\x11\xda\xe6\xd5\xc1\xc3\xbe\xb2\xba\x02\x1b\x61\x5f\xa1\xc0\x9e\xc0\x30\x58\x0f\x93\x9b\x2b\x78\x79\xc2\xd6\x18\xc9\x00\x7b\x68\x1c\x5a\x0f\x5d\x4e\xa6\x73\x80\xde\x40\x4d\xe8\x05\x84\x53\xf0\x86\x83\xe0\xda\x51\x3a\xd6\x1c\xa5\x67\x83\xb1\x51\x02\xc7\x8b\x57\xb0\x6e\x05\xac\x7c\x1f\x0f\xf6\x9e\x05\xb4\x23\x0c\x50\xf1\x3e\x19\x39\x46\x73\x7c\x52\x19\xb8\xfe\x9a\x78\xaa\xcf\xde\x4a\xc5\xad\x40\x85\x3b\xeb\x37\x07\x07\xc2\xa0\xdb\x28\x5c\xdb\x48\xc9\xae\x23\x5a\x89\xe4\xca\x01\x40\xe4\x36\x68\xfa\x46\x2b\xff\x93\xf6\xaf\x84\xa4\x9c\x24\x9c\x4e\x0d\x00\xa5\xc3\x4d\x2c\x52\x67\x00\x86\x68\x4c\xa0\x18\x8b\xd7\xd9\xe1\x37\xec\x6e\x3d\x1b\x52\xb6\x29\x46\x0f\xc7\x19\x79\x3c\x02\xda\xb5\x51\x28\x28\xe3\x63\x31\x7a\xf8\x70\xf3\x69\xb1\x9c\xdd\xad\xa6\xf3\x45\x4f\xa8\xf1\x6f\xd5\xb0\x49\xe8\xef\x93\x3f\x56\x1f\x6f\xa7\x27\xe8\xe0\xd4\xe1\x9a\x5c\xec\x1d\xdf\x4c\x7e\x9e\xdd\x2c\x1e\x5f\xa1\x6b\x2a\xcc\xba\x7c\x33\xcb\xe7\x12\x2f\x46\x0f\x67\x43\xd3\xfb\xc2\x56\x2a\xf2\x62\x35\x8a\x65\xaf\x84\xb7\xe4\xd5\x9e\xd6\x15\xf3\xb6\x90\xd0\xd2\x19\x8f\x83\xfd\xd2\xd1\x6a\x36\x54\x7c\xee\x58\x3d\xc1\x39\xde\xab\x26\xd8\x9d\x75\xb4\x21\x73\x6e\xdc\xb0\x51\xd6\x97\x01\x95\x66\x2f\x68\x3d\x05\x65\x6b\xdc\x50\xf1\xee\xf5\xd5\xf8\xf5\xe5\xe5\xf8\xcd\xf8\xed\x55\x66\xb6\x21\x23\x1d\xb2\xd1\xc3\xe4\xf3\x62\x35\x9d\xfd\x32\xf9\x74\xb3\x5c\xdd\xcd\x7e\xbd\xbe\x9d\x3f\x66\x58\xe3\x17\xf6\xb8\x8f\x99\xe6\x3a\xb5\x24\x6f\xb0\x8d\xa4\xb0\x36\xef\xc6\xef\xdf\x64\x97\xa7\xca\x72\x6b\x54\x13\x78\x67\x0d\x85\x02\xf7\xf1\x79\xc9\xb9\x46\xeb\x8b\xe3\xb1\x53\x45\x4f\xf1\x56\xad\xad\x57\xc6\x86\x22\xe7\x46\x72\xed\x6d\xda\x78\x67\xb0\x66\x5f\x76\x78\x52\x46\xc2\x3d\x49\x66\x7a\xc6\xe9\x7d\xa1\xf5\x69\x0e\x0b\xc3\x7a\x4b\xa1\xef\x1c\xc9\x9e\xc3\x56\x35\xae\xdd\xa4\x14\xbc\xed\xed\x36\x81\xdb\x46\x99\x60\x77\x14\x8a\xee\x54\xf6\x89\x07\xda\xd8\x43\xe6\xa9\xf1\xe7\x75\x3d\x01\x69\x4c\x54\x0a\x2c\x27\x45\x2c\x27\xd7\xf3\xe5\x49\x32\x87\xa5\xc3\xbe\xb4\x9b\xe2\xb9\xe4\xbb\xeb\xec\x1e\xeb\xbe\x0a\x25\xa1\xb4\x81\xd4\x26\x2d\xcc\xe2\x8e\x05\x85\x7e\xeb\x86\x63\x41\x61\x47\xe1\x03\x05\xb1\x65\xd2\xcc\x93\x74\xd0\xb3\xbf\xaf\xb9\x8d\x2a\xa9\xa5\x28\xd1\x45\x3a\xd5\xde\x92\x17\xa5\x51\x95\xd6\xd1\x93\x1c\x34\x66\x3a\x48\xe2\x5d\xa4\xa1\xea\xd6\xe2\xd7\x75\x9a\xb6\x22\x0c\x47\x0f\x87\x61\xfb\xf3\xa7\xbf\x1e\x87\x83\x8b\x41\xbf\x3c\x31\x3c\xe1\x0d\xfe\x09\x00\x00\xff\xff\x26\xb5\x25\xe8\xa0\x06\x00\x00")

func bootstrapUbuntuShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapUbuntuSh,
		"bootstrap.ubuntu.sh",
	)
}

func bootstrapUbuntuSh() (*asset, error) {
	bytes, err := bootstrapUbuntuShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap.ubuntu.sh", size: 1696, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubeletYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x4f\x4f\xc3\x30\x0c\xc5\xef\xf9\x14\xfe\x04\x6d\x07\x9a\x04\xb9\x8d\x4d\x70\x60\x27\x36\xe0\xec\xa6\xee\x16\x35\x8d\x27\xc7\x19\x7f\x3e\x3d\x5a\x5a\x90\x26\xa1\x9c\x9e\xde\xb3\xdf\x4f\xce\xe0\x63\x67\xe1\x39\xb7\x14\x48\xd7\x1c\x7b\x7f\xc8\x82\xea\x39\x1a\x3c\xf9\x37\x92\xe4\x39\x5a\x18\xa6\x40\xe5\x4a\xa2\x1a\xee\x52\xe5\xb9\x3e\x2f\x5a\x52\x5c\x18\x83\x5d\x27\x94\x92\x85\xa6\x2a\xcf\xb8\x90\x93\x92\x6c\x78\x44\x1f\x2d\xcc\xb2\x0a\xec\x30\x18\x83\x59\x8f\x14\xd5\xbb\x52\x64\x0d\x00\x46\x8e\x5f\x23\xe7\x74\x11\x00\x14\xb1\x0d\xd4\x59\xe8\x31\x24\x32\x00\x1f\xd4\x1e\x99\x87\xc9\x75\xe8\x8e\xb4\xdf\x6f\x2d\xdc\x8c\x4d\xba\x1e\x50\xc9\x97\xfc\xe7\xb2\xb9\x9f\xc3\xc1\x53\xd4\xf5\xea\xd1\x07\xb2\x50\x93\xba\x9a\x86\xe4\x34\xd4\x0e\x2b\x27\x3a\xd1\xb0\xf8\xef\x3f\x98\x91\x3b\xb2\xf0\x3e\x55\xfe\x5b\xbe\x9a\x47\xa8\x2b\x18\xcb\x5f\x8c\x62\xbe\x46\xbc\xb6\x6f\x9b\x64\x4c\x22\x39\x93\xec\xb7\xbb\x07\x66\x4d\x2a\x78\x9a\x61\x8d\x3b\x08\xe7\xd3\x46\xfc\x99\xc4\xc2\xa4\xfa\x64\x4c\x4f\xa8\x59\xe8\x09\x95\xca\x59\x5e\x58\x51\x69\xfe\xaa\x5d\x59\xb7\x26\x51\xdf\x5f\xee\x48\xf3\xb6\x9f\x00\x00\x00\xff\xff\x1f\x2f\xa9\x0f\xd0\x01\x00\x00")

func kubeletYamlBytes() ([]byte, error) {
	return bindataRead(
		_kubeletYaml,
		"kubelet.yaml",
	)
}

func kubeletYaml() (*asset, error) {
	bytes, err := kubeletYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubelet.yaml", size: 464, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"10-eksclt.al2.conf": _10EkscltAl2Conf,
	"bootstrap.al2.sh": bootstrapAl2Sh,
	"bootstrap.ubuntu.sh": bootstrapUbuntuSh,
	"kubelet.yaml": kubeletYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"10-eksclt.al2.conf": &bintree{_10EkscltAl2Conf, map[string]*bintree{}},
	"bootstrap.al2.sh": &bintree{bootstrapAl2Sh, map[string]*bintree{}},
	"bootstrap.ubuntu.sh": &bintree{bootstrapUbuntuSh, map[string]*bintree{}},
	"kubelet.yaml": &bintree{kubeletYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


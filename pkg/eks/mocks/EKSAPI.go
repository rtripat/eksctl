// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import eks "github.com/aws/aws-sdk-go/service/eks"

import mock "github.com/stretchr/testify/mock"
import request "github.com/aws/aws-sdk-go/aws/request"

// EKSAPI is an autogenerated mock type for the EKSAPI type
type EKSAPI struct {
	mock.Mock
}

// CreateCluster provides a mock function with given fields: _a0
func (_m *EKSAPI) CreateCluster(_a0 *eks.CreateClusterInput) (*eks.CreateClusterOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eks.CreateClusterOutput
	if rf, ok := ret.Get(0).(func(*eks.CreateClusterInput) *eks.CreateClusterOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.CreateClusterOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eks.CreateClusterInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateClusterRequest provides a mock function with given fields: _a0
func (_m *EKSAPI) CreateClusterRequest(_a0 *eks.CreateClusterInput) (*request.Request, *eks.CreateClusterOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eks.CreateClusterInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eks.CreateClusterOutput
	if rf, ok := ret.Get(1).(func(*eks.CreateClusterInput) *eks.CreateClusterOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eks.CreateClusterOutput)
		}
	}

	return r0, r1
}

// CreateClusterWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EKSAPI) CreateClusterWithContext(_a0 context.Context, _a1 *eks.CreateClusterInput, _a2 ...request.Option) (*eks.CreateClusterOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eks.CreateClusterOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eks.CreateClusterInput, ...request.Option) *eks.CreateClusterOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.CreateClusterOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eks.CreateClusterInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCluster provides a mock function with given fields: _a0
func (_m *EKSAPI) DeleteCluster(_a0 *eks.DeleteClusterInput) (*eks.DeleteClusterOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eks.DeleteClusterOutput
	if rf, ok := ret.Get(0).(func(*eks.DeleteClusterInput) *eks.DeleteClusterOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.DeleteClusterOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eks.DeleteClusterInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteClusterRequest provides a mock function with given fields: _a0
func (_m *EKSAPI) DeleteClusterRequest(_a0 *eks.DeleteClusterInput) (*request.Request, *eks.DeleteClusterOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eks.DeleteClusterInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eks.DeleteClusterOutput
	if rf, ok := ret.Get(1).(func(*eks.DeleteClusterInput) *eks.DeleteClusterOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eks.DeleteClusterOutput)
		}
	}

	return r0, r1
}

// DeleteClusterWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EKSAPI) DeleteClusterWithContext(_a0 context.Context, _a1 *eks.DeleteClusterInput, _a2 ...request.Option) (*eks.DeleteClusterOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eks.DeleteClusterOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eks.DeleteClusterInput, ...request.Option) *eks.DeleteClusterOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.DeleteClusterOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eks.DeleteClusterInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCluster provides a mock function with given fields: _a0
func (_m *EKSAPI) DescribeCluster(_a0 *eks.DescribeClusterInput) (*eks.DescribeClusterOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eks.DescribeClusterOutput
	if rf, ok := ret.Get(0).(func(*eks.DescribeClusterInput) *eks.DescribeClusterOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.DescribeClusterOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eks.DescribeClusterInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeClusterRequest provides a mock function with given fields: _a0
func (_m *EKSAPI) DescribeClusterRequest(_a0 *eks.DescribeClusterInput) (*request.Request, *eks.DescribeClusterOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eks.DescribeClusterInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eks.DescribeClusterOutput
	if rf, ok := ret.Get(1).(func(*eks.DescribeClusterInput) *eks.DescribeClusterOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eks.DescribeClusterOutput)
		}
	}

	return r0, r1
}

// DescribeClusterWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EKSAPI) DescribeClusterWithContext(_a0 context.Context, _a1 *eks.DescribeClusterInput, _a2 ...request.Option) (*eks.DescribeClusterOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eks.DescribeClusterOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eks.DescribeClusterInput, ...request.Option) *eks.DescribeClusterOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.DescribeClusterOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eks.DescribeClusterInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUpdate provides a mock function with given fields: _a0
func (_m *EKSAPI) DescribeUpdate(_a0 *eks.DescribeUpdateInput) (*eks.DescribeUpdateOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eks.DescribeUpdateOutput
	if rf, ok := ret.Get(0).(func(*eks.DescribeUpdateInput) *eks.DescribeUpdateOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.DescribeUpdateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eks.DescribeUpdateInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUpdateRequest provides a mock function with given fields: _a0
func (_m *EKSAPI) DescribeUpdateRequest(_a0 *eks.DescribeUpdateInput) (*request.Request, *eks.DescribeUpdateOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eks.DescribeUpdateInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eks.DescribeUpdateOutput
	if rf, ok := ret.Get(1).(func(*eks.DescribeUpdateInput) *eks.DescribeUpdateOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eks.DescribeUpdateOutput)
		}
	}

	return r0, r1
}

// DescribeUpdateWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EKSAPI) DescribeUpdateWithContext(_a0 context.Context, _a1 *eks.DescribeUpdateInput, _a2 ...request.Option) (*eks.DescribeUpdateOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eks.DescribeUpdateOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eks.DescribeUpdateInput, ...request.Option) *eks.DescribeUpdateOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.DescribeUpdateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eks.DescribeUpdateInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClusters provides a mock function with given fields: _a0
func (_m *EKSAPI) ListClusters(_a0 *eks.ListClustersInput) (*eks.ListClustersOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eks.ListClustersOutput
	if rf, ok := ret.Get(0).(func(*eks.ListClustersInput) *eks.ListClustersOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.ListClustersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eks.ListClustersInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClustersRequest provides a mock function with given fields: _a0
func (_m *EKSAPI) ListClustersRequest(_a0 *eks.ListClustersInput) (*request.Request, *eks.ListClustersOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eks.ListClustersInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eks.ListClustersOutput
	if rf, ok := ret.Get(1).(func(*eks.ListClustersInput) *eks.ListClustersOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eks.ListClustersOutput)
		}
	}

	return r0, r1
}

// ListClustersWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EKSAPI) ListClustersWithContext(_a0 context.Context, _a1 *eks.ListClustersInput, _a2 ...request.Option) (*eks.ListClustersOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eks.ListClustersOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eks.ListClustersInput, ...request.Option) *eks.ListClustersOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.ListClustersOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eks.ListClustersInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUpdates provides a mock function with given fields: _a0
func (_m *EKSAPI) ListUpdates(_a0 *eks.ListUpdatesInput) (*eks.ListUpdatesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eks.ListUpdatesOutput
	if rf, ok := ret.Get(0).(func(*eks.ListUpdatesInput) *eks.ListUpdatesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.ListUpdatesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eks.ListUpdatesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUpdatesRequest provides a mock function with given fields: _a0
func (_m *EKSAPI) ListUpdatesRequest(_a0 *eks.ListUpdatesInput) (*request.Request, *eks.ListUpdatesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eks.ListUpdatesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eks.ListUpdatesOutput
	if rf, ok := ret.Get(1).(func(*eks.ListUpdatesInput) *eks.ListUpdatesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eks.ListUpdatesOutput)
		}
	}

	return r0, r1
}

// ListUpdatesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EKSAPI) ListUpdatesWithContext(_a0 context.Context, _a1 *eks.ListUpdatesInput, _a2 ...request.Option) (*eks.ListUpdatesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eks.ListUpdatesOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eks.ListUpdatesInput, ...request.Option) *eks.ListUpdatesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.ListUpdatesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eks.ListUpdatesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClusterConfig provides a mock function with given fields: _a0
func (_m *EKSAPI) UpdateClusterConfig(_a0 *eks.UpdateClusterConfigInput) (*eks.UpdateClusterConfigOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eks.UpdateClusterConfigOutput
	if rf, ok := ret.Get(0).(func(*eks.UpdateClusterConfigInput) *eks.UpdateClusterConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.UpdateClusterConfigOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eks.UpdateClusterConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClusterConfigRequest provides a mock function with given fields: _a0
func (_m *EKSAPI) UpdateClusterConfigRequest(_a0 *eks.UpdateClusterConfigInput) (*request.Request, *eks.UpdateClusterConfigOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eks.UpdateClusterConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eks.UpdateClusterConfigOutput
	if rf, ok := ret.Get(1).(func(*eks.UpdateClusterConfigInput) *eks.UpdateClusterConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eks.UpdateClusterConfigOutput)
		}
	}

	return r0, r1
}

// UpdateClusterConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EKSAPI) UpdateClusterConfigWithContext(_a0 context.Context, _a1 *eks.UpdateClusterConfigInput, _a2 ...request.Option) (*eks.UpdateClusterConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eks.UpdateClusterConfigOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eks.UpdateClusterConfigInput, ...request.Option) *eks.UpdateClusterConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.UpdateClusterConfigOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eks.UpdateClusterConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClusterVersion provides a mock function with given fields: _a0
func (_m *EKSAPI) UpdateClusterVersion(_a0 *eks.UpdateClusterVersionInput) (*eks.UpdateClusterVersionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *eks.UpdateClusterVersionOutput
	if rf, ok := ret.Get(0).(func(*eks.UpdateClusterVersionInput) *eks.UpdateClusterVersionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.UpdateClusterVersionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*eks.UpdateClusterVersionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClusterVersionRequest provides a mock function with given fields: _a0
func (_m *EKSAPI) UpdateClusterVersionRequest(_a0 *eks.UpdateClusterVersionInput) (*request.Request, *eks.UpdateClusterVersionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*eks.UpdateClusterVersionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *eks.UpdateClusterVersionOutput
	if rf, ok := ret.Get(1).(func(*eks.UpdateClusterVersionInput) *eks.UpdateClusterVersionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*eks.UpdateClusterVersionOutput)
		}
	}

	return r0, r1
}

// UpdateClusterVersionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EKSAPI) UpdateClusterVersionWithContext(_a0 context.Context, _a1 *eks.UpdateClusterVersionInput, _a2 ...request.Option) (*eks.UpdateClusterVersionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *eks.UpdateClusterVersionOutput
	if rf, ok := ret.Get(0).(func(context.Context, *eks.UpdateClusterVersionInput, ...request.Option) *eks.UpdateClusterVersionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eks.UpdateClusterVersionOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *eks.UpdateClusterVersionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitUntilClusterActive provides a mock function with given fields: _a0
func (_m *EKSAPI) WaitUntilClusterActive(_a0 *eks.DescribeClusterInput) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*eks.DescribeClusterInput) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilClusterActiveWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EKSAPI) WaitUntilClusterActiveWithContext(_a0 context.Context, _a1 *eks.DescribeClusterInput, _a2 ...request.WaiterOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *eks.DescribeClusterInput, ...request.WaiterOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilClusterDeleted provides a mock function with given fields: _a0
func (_m *EKSAPI) WaitUntilClusterDeleted(_a0 *eks.DescribeClusterInput) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*eks.DescribeClusterInput) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilClusterDeletedWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *EKSAPI) WaitUntilClusterDeletedWithContext(_a0 context.Context, _a1 *eks.DescribeClusterInput, _a2 ...request.WaiterOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *eks.DescribeClusterInput, ...request.WaiterOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
